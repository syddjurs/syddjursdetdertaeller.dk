/**
 * Component: Navigation
 */

 var sddt = sddt || {};

 sddt.navigation = sddt.navigation || function() {
  this.init = function() {
    toggleNavigation();
    //stickyHeader();
  };

  this.stickyHeader = function(){
    var siteHeight = jQuery('body').height(),
        siteHeader = jQuery('#js-site-header'),
        siteHeaderOriginalHeight = siteHeader.height();

    if (window.innerWidth > 991) {
      jQuery(window).scroll(function(){
        if (siteHeader.length > 0) {
          if (jQuery(window).scrollTop() > (siteHeader.height() - (siteHeader.outerHeight() - siteHeader.innerHeight())) && jQuery(window).scrollTop() > siteHeaderOriginalHeight) {
            siteHeader.addClass('js-fixed');
          }
          else {
            siteHeader.removeClass('js-fixed');
          }
        }
      });
    }
  };

  this.toggleNavigation = function(){
    if (jQuery('#js-navigation').length > 0) {
      jQuery('#js-navigation-open, #js-navigation-close').on('click', function(){
        if (!jQuery('#js-navigation').hasClass('js-active')) {
          // Add active class to the menu
          jQuery('#js-navigation').addClass('js-active');

          // Add menu-open class to the site-header
          jQuery('#js-site-header').addClass('js-menu-open');

          // Add a backdrop to the site
          sddt.overlay.backdrop();
        }
        else {
          // Remove active class to the menu
          jQuery('#js-navigation').removeClass('js-active');

          // Remove menu-open class to the site-header
          jQuery('#js-site-header').removeClass('js-menu-open');

          // Remove the backdrop
          sddt.overlay.destroy();
        }
      });
    }
  };


         // this.toggleMobileNavigation = function(){
         //     if (jQuery('#js-mobile-navigation').length > 0) {
         //         jQuery('#js-mobile-navigation-open, #js-mobile-navigation-close').on('click', function(){
         //             if (!jQuery('#js-mobile-navigation').hasClass('js-active')) {
         //                 // Add active class to the menu
         //                 jQuery('#js-mobile-navigation').addClass('js-active');
         //
         //                 // Add menu-open class to the site-header
         //                 jQuery('#js-site-header').addClass('js-menu-open');
         //
         //                 // Add a backdrop to the site
         //                 sddt.overlay.backdrop();
         //             }
         //             else {
         //                 // Remove active class to the menu
         //                 jQuery('#js-mobile-navigation').removeClass('js-active');
         //
         //                 // Remove menu-open class to the site-header
         //                 jQuery('#js-site-header').removeClass('js-menu-open');
         //
         //                 // Remove the backdrop
         //                 sddt.overlay.destroy();
         //             }
         //         });
         //     }
         // };
  /**
   * Script to move navigation elements around depending on the window inner width
   */
  this.moveNavigationElements = function () {
    if (jQuery('#js-mobile-navigation').length > 0) {
      var siteHeader = jQuery('#js-site-header'),
          siteSearch = jQuery('#js-site-search'),
          siteNavigation = jQuery('#js-site-navigation'),
          mobileNavigation = jQuery('#js-navigation'),
          breadcrumb = jQuery('#js-breadcrumb');

      setTimeout(function() {
        if (window.innerWidth < 992) {
        /*
         * Move elements to mobile view
         */
          // Search
          // siteSearch.appendTo(mobileNavigation);

          // Navigation
          siteNavigation.appendTo(mobileNavigation);
        }
        else {
          /*
           * Move elements to desktop view
           */
          // Search
          siteSearch.insertAfter(breadcrumb);

          // Navigation
          siteNavigation.insertAfter(jQuery('.logo', siteHeader));
        }
      }, 300);
    }
  };

  return {
    init: init,
    moveNavigationElements: moveNavigationElements
  };
}();

/**
 * Component: Overlay
 * Both overlay and backdrop
 */


var sddt = sddt || {};

sddt.overlay = sddt.overlay || function () {

  this.init = function() {
   openOverlay();
  };

  this.openOverlay = function() {
    jQuery('body').on('click', '.js-open-overlay', function(e){
      e.preventDefault();

      var src = jQuery(this).data('src');

      jQuery.ajax({
        url : src,
        context: document.body
      }).done(function(data){
        create({
          content: data
        });
      });
    });
  };

  // Overlay functions
  this.backdrop = function() {
    if (jQuery('#js-overlay-backdrop').length !== 1) {
      jQuery('body').append('<div id="js-overlay-backdrop" class="overlay-backdrop"></div>');
      // jQuery('#js-overlay-backdrop').height(jQuery('body').height());

      // Lock scroll
      jQuery.scrollLock(true);

      jQuery('#js-overlay-backdrop').on('click', function(){
        destroy();
      });
    }
  };

  this.create = function(data) {
    // reset overlay the hard way
    if (jQuery('#js-overlay').length === 1) {
      jQuery('#js-overlay, #js-overlay-content').remove();
    }
    else {
      backdrop();
    }

    var btnClose = jQuery('<a>x</a>').attr('href', '#closeOverlay').addClass('js-overlay-close');
    var overlayInner = jQuery('<div>').addClass('js-overlay-inner').append(jQuery('<div>').addClass('js-overlay-inner-scroll').append(data.content));

    jQuery('body').append(jQuery('<div>').attr('id', 'js-overlay-content').append(btnClose).append(overlayInner).fadeIn("fast"));

    if (data['class'] !== undefined) {
      jQuery('#js-overlay-content').addClass(data['class']);
    }
    jQuery('.js-overlay-close').on("click", function (e) {
      e.preventDefault();
      destroy();
    });
    // escape click bind on close button
    jQuery(document).keyup(function (e) {
      if (e.keyCode == 27) {
        destroy();
      }
    });
  };

  this.destroy = function() {
    if (jQuery('#js-overlay-backdrop').length === 1) {

      // Remove all js-active elements
      jQuery('.js-active').removeClass('js-active');

      // Remove the site header menu open if its there
      if (jQuery('#js-site-header').hasClass('js-menu-open')) {
        jQuery('#js-site-header').removeClass('js-menu-open');
      }

      jQuery('#js-overlay-backdrop, #js-overlay-content').remove();

      // Unlock scroll
      jQuery.scrollLock(false);
    }
  };

  return {
    init: init,
    backdrop : backdrop,
    destroy : destroy,
    create : create
  };
}();

jQuery.scrollLock = (function scrollLockClosure($) {
  'use strict';

  var $html = $('html'),
      // State: unlocked by default
      locked = false,
      // State: scroll to revert to
      prevScroll = {
        scrollLeft: $(window).scrollLeft(),
        scrollTop: $(window).scrollTop()
      },
      // State: styles to revert to
      prevStyles = {},
      lockStyles = {
        'overflow-y': 'scroll',
        'position': 'fixed',
        'width': '100%'
      };

  // Instantiate cache in case someone tries to unlock before locking
  saveStyles();

  // Save context's inline styles in cache
  function saveStyles() {
    var styleAttr = $html.attr('style'),
    styleStrs = [],
    styleHash = {};

    if (!styleAttr) {
      return;
    }

    styleStrs = styleAttr.split(/;\s/);

    $.each(styleStrs, function serializeStyleProp(styleString) {
      if (!styleString) {
        return;
      }

      var keyValue = styleString.split(/\s:\s/);

      if (keyValue.length < 2) {
        return;
      }

      styleHash[keyValue[0]] = keyValue[1];
    });

    $.extend(prevStyles, styleHash);
  }

  function lock() {
    var appliedLock = {};

    // Duplicate execution will break DOM statefulness
    if (locked) {
      return;
    }

    // Save scroll state...
    prevScroll = {
      scrollLeft: $(window).scrollLeft(),
      scrollTop: $(window).scrollTop()
    };

    // ...and styles
    saveStyles();

    // Compose our applied CSS
    $.extend(appliedLock, lockStyles, {
      // And apply scroll state as styles
      'left': -prevScroll.scrollLeft + 'px',
      'top': -prevScroll.scrollTop + 'px'
    });

    // Then lock styles...
    $html.css(appliedLock);

    // ...and scroll state
    $(window)
    .scrollLeft(0)
    .scrollTop(0);

    locked = true;
  }

  function unlock() {
    // Duplicate execution will break DOM statefulness
    if (!locked) {
      return;
    }

    // Revert styles
    $html.attr('style', $('<x>').css(prevStyles).attr('style') || '');

    // Revert scroll values
    $(window)
    .scrollLeft(prevScroll.scrollLeft)
    .scrollTop(prevScroll.scrollTop);

    locked = false;
  }

  return function scrollLock(on) {
    // If an argument is passed, lock or unlock depending on truthiness
    if (arguments.length) {
      if (on) {
        lock();
      }
      else {
        unlock();
      }
    }
    // Otherwise, toggle
    else {
      if (locked) {
        unlock();
      }
      else {
        lock();
      }
    }
  };
}(jQuery));
(function(d) {
  var config = {
      kitId: 'ffv6lfn',
      scriptTimeout: 3000,
      async: true
    },
    h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)
})(document);

/*!

 Syddjurs - det der t√¶ller

 Proud authors:      www.novicell.dk
 People behind:      Mikkel Mandal, @mikkelmandal

 !*/

var sddt = sddt || {};

// Document ready
jQuery(function () {
// sddt.polyfills.init();
  sddt.navigation.init();
  sddt.overlay.init();
// sddt.overlay.init();
// sddt.animations.init();
// sddt.tooltip.init();

  svg4everybody(); // Fix SVG spritemap in IE/Edge
});

// Window resize
jQuery(window).resize(function () {

}).resize();

/**
 * @file
 * Javascript for the node content editing form.
 */
(function ($, drupalSettings) {

  'use strict';

  /**
   * Behaviors for setting summaries on content type form.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Attaches summary behaviors on content type edit forms.
   */
  Drupal.behaviors.sddt = {
    attach: function (context) {
      // var context = $(context);

      // $('body').on('click','.notification__close',function(){
      //   $(this).closest('.notification').fadeOut(2000).slideUp(2000,function(){
      //     $(this).remove();
      //   });
      // });
    }
  };

  Drupal.behaviors.googleMaps = {
    attach: function (context) {
      var bounds = new google.maps.LatLngBounds();
      var infowindow = new google.maps.InfoWindow();

      $.each(drupalSettings.google_maps.data,function(){
        var data = this;

        $('.google-maps__map-container__id-' + data.map_id).each(function(){
          if(!$(this).data('initialized')){
            $(this).data('initialized',true);

            var map = new google.maps.Map(this, {
              center: {lat: 56.24, lng: 10.58},
              // zoom: 8,
              scrollwheel: false
            });

            $.each(data.pins,function(){
              var pin = this;

              var marker = new google.maps.Marker({
                position: new google.maps.LatLng(pin.latitude, pin.longitude),
                title: pin.name,
                map: map
              });

              bounds.extend(marker.position);

              google.maps.event.addListener(marker, 'click', (function (marker, pin) {
                return function () {
                  infowindow.setContent(pin.name);
                  infowindow.open(map, marker);
                }
              })(marker, pin));
            });

            // map.fitBounds(bounds);

            var listener = google.maps.event.addListener(map, "idle", function () {
              map.setZoom(10);
              google.maps.event.removeListener(listener);
            });
          }
        });
      });

      // jQuery(function () {
      //   // Create a map object and specify the DOM element for display.
      //   var map = new google.maps.Map($('.google-maps__id-{{ map_id }}'), {
      //     center: {lat: -34.397, lng: 150.644},
      //     scrollwheel: false,
      //     zoom: 8
      //   });
      //
      //   {% for pin in pins %}
      //   var marker = new google.maps.Marker({
      //     map: map,
      //     position: {lat: {{ pin.latitude }}, lng: {{ pin.longitude }}},
      //   title: '{{ pin.name }}'
      // });
      //   {% endfor %}
      // });
    }
  };



})(jQuery, drupalSettings);

//# sourceMappingURL=master.min.js.map
