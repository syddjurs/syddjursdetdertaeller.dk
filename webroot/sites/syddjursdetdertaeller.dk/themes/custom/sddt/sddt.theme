<?php
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

function sddt_image_style_from_field(&$variables, $field) {
  if (!empty($variables['content'][$field][0]['#item']) && $item = $variables['content'][$field][0]['#item']) {
    $style = ImageStyle::load($variables['content'][$field][0]['#image_style']);
    $uri = $item->get('entity')
      ->getTarget()
      ->getValue()
      ->getFileUri();
    if (!empty($uri)) {
      $url = $style->buildUrl($uri);
    }
    else {
      $url = '';
    }
    $variables['styled_image'][$field] = array(
      'url' => $url,
    );
  }
}

function sddt_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if ($variables['elements']['#plugin_id'] == 'system_main_block') {
    $current_path = \Drupal::request()->getPathInfo();
    $path_args = explode('/', $current_path);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['elements']['#id'] . '__' . $path_args[1];
  }

  if (!isset($variables['elements']['#configuration']['region'])) {
    $block_id = $variables['elements']['#id'];
    $block = \Drupal\block\Entity\Block::load($block_id);
    $variables['region'] = $block->getRegion();
    $suggestions[] = 'block__' . $variables['region'];
    if (isset($block_id)) {
      $suggestions[] = 'block__' . $variables['region'] . '__' . $block_id;
    }
  }

  if (isset($variables['elements']['content']['#block_content'])) {
    $block_content = $variables['elements']['content']['#block_content'];
    if ($bundle = $block_content->bundle()) {
      $suggestions[] = 'block__' . $bundle;
    }
  }
}

function sddt_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element'])) {
    $element = $variables['element'];
    switch ($hook) {
      case 'input':
        $suggestions[] = 'input__' . $element['#name'];
      case 'form_element':
        $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#type'] . (!empty($element['#name']) ? '__' . $element['#name'] : '');
        break;
      case 'form':
        $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#form_id'];
        break;
    }
  }
}

/**
 * Implementation of hook_form_alter
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function sddt_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'search_block_form':
      $form['keys']['#attributes']['class'] = array('site-search__input');
      $form['keys']['#type'] = 'textfield';
      $form['keys']['#title_display'] = 'hidden';
      unset($form['keys']['#theme_wrappers']);
      unset($form['actions']['#theme_wrappers']);
      $form['actions']['submit']['#search'] = TRUE;
      break;
    case 'search_form':
      $form['#attributes']['class'] = 'search-results-form';
      unset($form['basic']['#attributes']['class']);
      unset($form['help_link']);

      $form['basic']['keys'] = array(
        '#type' => 'textfield',
        '#title' => $form['basic']['keys']['#title'],
        '#title_display' => 'hidden',
        '#default_value' => $form['basic']['keys']['#default_value'],
        '#attributes' => array(
          'class' => array('input', 'search-results-form__input'),
          'placeholder' => $form['basic']['keys']['#title']
        ),
        '#wrapper_attributes' => array('class' => array('search-results-form__input-container'))
      );

      $form['basic']['submit']['#weight'] = -1;
      $form['basic']['submit']['#attributes']['class'] = array(
        'button',
        'search-results-form__button'
      );
      break;
  }
}

/**
 * Implementation of hook_preprocess_HOOK (input)
 * @param $variables
 */
function sddt_preprocess_input(&$variables) {
  if (in_array($variables['theme_hook_original'],['input__textfield','input__password'])) {
    $variables['attributes']['class'][] = 'input';
  }

  if ($variables['theme_hook_original'] == 'input__submit') {
    $variables['attributes']['class'][] = 'button';
  }

  if ($variables['theme_hook_original'] == 'input__submit' && isset($variables['element']['#search'])) {
    $variables['attributes']['class'] = array('site-search__button');
  }
}

/**
 * Implementation of hook_preprocess_HOOK (input)
 * @param $variables
 */
function sddt_preprocess_form(&$variables) {
  switch ($variables['attributes']['id']) {
    case 'search-block-form':
      $variables['attributes']['class'][] = 'site-search';
      $variables['attributes']['id'] = 'js-site-search';
      break;
  }
}

/**
 * Implementing hook_preprocess_HOOK (paragraph)
 * @param $variables
 */
function sddt_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  switch ($paragraph->bundle()) {
    case 'top_banner_hero':
      $variables['attributes']['class'][] = 'hero';
      sddt_image_style_from_field($variables, 'field_image');
      break;
    case 'single_section_text':
      // Set attributes
      $variables['attributes']['class'][] = 'single-section';
      break;
    case 'double_section':
      // Set attributes
      $variables['attributes']['class'][] = 'double-section';
      //$variables['attributes']['class'][] = 'no-gutter-section';
      break;
    case 'double_2_1_section':
      // Set attributes
      $variables['attributes']['class'][] = 'double-2-1-section';
      //$variables['attributes']['class'][] = 'no-gutter-section';
      break;
    case 'double_section_element_image':
      $variables['attributes']['class'][] = 'double-section__img';
      $variables['attributes']['class'][] = 'col--xs-12';
      //$variables['attributes']['class'][] = 'col--md-6';
      $variables['attributes']['class'][] = 'no-gutter';
      if($paragraph->hasField('field_image')){
        if (!empty($paragraph->field_image->entity) && !empty($paragraph->field_image->entity->getFileUri())) {
          $path = ImageStyle::load('double_section_xxs')->buildUrl($paragraph->field_image->entity->getFileUri());
          $variables['image_path'] = $path;
        }
      }
      break;
    case 'double_section_element_text':
      $variables['attributes']['class'][] = 'double-section__text';
      $variables['attributes']['class'][] = 'col--xs-12';
      //$variables['attributes']['class'][] = 'col--md-6';
      $variables['attributes']['class'][] = 'no-gutter';
      break;
    case 'triple_section':
      // Set attributes
      $variables['attributes']['class'][] = 'triple-section';
      break;
    case 'triple_section_element_img_text':
      $variables['attributes']['class'][] = 'col--xs-12';
      $variables['attributes']['class'][] = 'triple-section__img';
      //$variables['attributes']['class'][] = 'col--md-4';
      break;
    case 'simple_quiz':
      // Set attributes
      $variables['attributes']['class'][] = 'simple-quiz';
      //$variables['attributes']['class'][] = 'no-gutter-section';
      break;

  }

  if($paragraph->hasField('field_video')){
    if(empty($paragraph->get('field_video')->getValue())){
      unset($variables['content']['field_video']);
    }
  }

  if($paragraph->hasField('field_cta_button')){
    foreach($paragraph->get('field_cta_button') as $key => $link){
      if($link->isExternal()){
        $variables['content']['field_cta_button'][$key]['#attributes'] = [
          'target' => [
            '_blank',
          ],
          'class' => [
            'button',
            'button--secondary',
          ],
        ];
      }
    }
  }

  if(isset($paragraph->field_insert_space->value) && empty($paragraph->field_insert_space->value)){
    $variables['attributes']['class'][] = 'no-spacing';
  }

  if(!empty($paragraph->field_layout->value)){
    $variables['attributes']['class'][] = 'layout-'.$paragraph->field_layout->value;
  }

//  if ($fid = $paragraph->field_image->target_id) {
//    $file = File::load($fid);
//    $path = ImageStyle::load('full_width')->buildUrl($file->getFileUri());
//    $variables['attributes']['class'][] = 'splash';
//    $variables['attributes']['style'][] = 'background-image: url(' . $path . ');';
//  }
//  $variables['button'] = [
//    '#title' => t('See all questions and answers'),
//    '#type' => 'link',
//    '#url' => Url::fromUserInput('/kundeservice/tv/faq'),
//    '#attributes' => array(
//      'class' => array('button', 'button--secondary')
//    )
//  ];
}

function sddt_preprocess_block(&$variables) {
  if (isset($variables['content']['#block_content'])) {
    $block = $variables['content']['#block_content'];

    if ($block->bundle() == 'hero_tv') {
      if ($fid = $block->field_banner->target_id) {
        $file = File::load($fid);
        $path = ImageStyle::load('full_width')->buildUrl($file->getFileUri());
        $variables['attributes']['class'][] = 'hero';
        $variables['hero_image'] = $path;
        $variables['content']['field_button'][0]['#attributes']['class'] = array(
          'button',
          'button--large',
          'content-block-cta__button',
        );
      }
    }
  }
}
